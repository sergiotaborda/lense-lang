
import lense.core.lang.Binary;
import lense.core.lang.Boolean;
import lense.core.collections.Array;
import lense.core.math.Natural;
import lense.core.lang.Void;
import lense.core.lang.String;
import lense.core.math.Integer;
import lense.core.lang.HashValue;

public mutable class BitArray implements Binary {

	private bits: Array<Boolean>; // TODO compiler must used this variable for primary constructor and not init it

	public constructor ( private bits: Array<Boolean>); // TODO after removing explicit property , the compiler assumes Array<Array>

	public constructor (bitCount: Natural){
		return new BitArray(new Array<Boolean>(bitCount, false));
	}
	
	public constructor (bitCount: Natural,  seed: Boolean){
		return new BitArray(new Array<Boolean>(bitCount, seed));
	}
	
	public implicit constructor valueOf (bits: Array<Boolean>){
		return new BitArray(bits);
	}

	public constructor valueOf (binary: Binary){
		let array : Array<Boolean> = new Array<Boolean>(binary.bitsCount, false); // TODO remove left side typing
		
		for (i in 0 ..< binary.bitsCount){
			array[i] = binary.bitAt(i);
		}
		
		return new BitArray(array);
	}

	// number of bits set to 1
	public cardinality() : Natural {
		mutable let value = 0;
/{
		for (let bit in bits){
			if (bit){
				value+=1;
			}
		}
}/
	
		for (i in 0 ..< bits.size){
			if (bits[i]){
				value+=1;
			}
		}

		return value;
	} 

	public flip( index: Natural): Void{
		if (index < this.bitsCount){
			this.bits[index] = !this.bits[index];
		}
	}
	
	public or( other: Binary): BitArray {
		
		let maxSize = this.bitsCount > other.bitsCount ? this.bitsCount : other.bitsCount;

		let orArray = new BitArray(maxSize); 

		for (let index in 0 ..< maxSize ){
			orArray[index] = this.bitAt(index) | other.bitAt(index);
		}
	
		return orArray;
	}

	public and( other: Binary): BitArray {
		
		let maxSize = this.bitsCount > other.bitsCount ? this.bitsCount : other.bitsCount;

		let orArray = new BitArray(maxSize); 

		for (let index in 0 ..< maxSize ){
			orArray[index] = this.bitAt(index) & other.bitAt(index);
		}
	
		return orArray;
	}

	public xor( other: Binary): BitArray {
		
		let maxSize = this.bitsCount > other.bitsCount ? this.bitsCount : other.bitsCount;

		let orArray = new BitArray(maxSize); 

		for (let index in 0 ..< maxSize ){
			orArray[index] = this.bitAt(index) ^ other.bitAt(index);
		}
	
		return orArray;
	}


	public rightShiftBy( n: Natural): BitArray { 
		let newSize = bits.size &- n;

		let newArray = new Array<Boolean>(newSize, false); 

		this.bits.copyTo(newArray, n, 0, newSize);

		return new BitArray(newArray); 
	}
	
	public leftShiftBy(n : Natural) : BitArray{
		let newArray = new Array<Boolean>(bits.size + n, false); 

		this.bits.copyTo(newArray, 0, n, bits.size);
 
		return new BitArray(newArray); 
	}
	
	public complement() : Binary {
		let  negated : Array<Boolean> = bits.duplicate();

		for (n in negated.indexes){
			negated[n] = !negated[n];
		}
		
		return new BitArray(negated);
	}	
	
	public bitsCount : Natural {
		get{
			return bits.size;
		}
	} 
	
	public [ index: Natural] : Boolean{
		get {
			if (index >= this.bitsCount){
				return false;
			}
			return bits[index];
		}
		set(value) {
			if (index < this.bitsCount){
				bits[index] = value;
			} 
		}
	}
	
	public bitAt( index: Natural) : Boolean {
		return this[index];
	}
	
	public override equalsTo(other: Any) : Boolean {
		if (other is BitArray){
			let min = this.bitsCount <= other.bitsCount ? this.bitsCount : other.bitsCount; 

			for (let index in 0 ..< min ){
				if (this.bitAt(index) != other.bitAt(index)){
					return false;
				}
			}
			// all remaining bits must be false
			if (this.bitsCount > min){
				for (let index in min ..< this.bitsCount ){
					if (this.bitAt(index)){
						return false;
					}
				}
			} else if (other.bitsCount > min){
				for (let index in min ..< other.bitsCount ){
					if (other.bitAt(index)){
						return false;
					}
				}
			}
			return true;
		}
		return false;
	}

	public override hashValue():  HashValue {
		return bits.size.hashValue();
	}
	
	public override asString() : String {
		return this.bits.asString();
	}

}