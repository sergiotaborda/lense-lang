
import lense.core.lang.Void;
import lense.core.lang.Some;
import lense.core.lang.String;
import lense.core.lang.Boolean;
import lense.core.collections.IllegalIndexException;
import lense.core.math.Natural;
import lense.core.collections.ResizableSequence;
import lense.core.collections.Sequence;
import lense.core.collections.Iterator;
import lense.core.collections.Array;
import lense.core.collections.Progression;
import lense.core.lang.HashValue;

public mutable class List<T> implements ResizableSequence<T> {

	private mutable length : Natural = 0;

	private constructor (private mutable array : Array<T?>);

/{ 
	needs a way to create a T from nothing 1) can use an Array<Maybe<T>> backed with a plataform implementation
	public constructor (Natural capacity) {
		return new List<T>(capacity, new Array<T>(capacity, seed));
	}
}/

	public constructor(capacity : Natural) {
		return new List<T>(new Array<T?>(capacity, none));
	}

	public constructor() {
		return new List<T>(new Array<T?>.empty());
	}

	public implicit constructor( other : Sequence<T>) { // TODO implicit must be public (or acessible)

		// else, copy each element
		let list =  new List<T>(new Array<T?>(other.size, none));

		for (item in other){
			list.add(item);
		}

		return list;
	}

	public size : Natural => length;

	public empty : Boolean => length == 0;

// TODO limit to length 
	public iterator : Iterator<T> {
		get {
			return array.iterator; // TODO .limit(length)
		}
	} 

	public indexes : Progression<Natural> => 0 ..< length;

	public add(value : T) {
		
		let capacity = array.size; // how many can there be
		if (capacity < length + 1) {
			// increase capacity
			let newCapacity = 1 + (capacity * 3) \ 2; 
			let newArray = new Array<T?>(newCapacity, value);		// TODO parse T? as T , ? and not T? Identifier	
			this.array.copyTo(newArray);
			this.array = newArray;
		}

		array[length] = new Some<T>(value);
		this.length += 1; 
	}

	public remove(value : T) {

		let maybe : T? = value;
// TODO reformat array
		let index = array.indexOf(maybe);
/{

		if (index is none ){ // TODO make into bnf or   if (index exists)
			// no-op // make use of index at this scope proibited
		} else {
			// TODO  make auto boxing of value in index automatic
		}
}/
		length = length &- 1;
	}

	public  [index: Natural] : T { 
		get {
			if ( index > length - 1){
				throw new IllegalIndexException("Passed index {{ index }} is greater than maximum index {{ length - 1 }} ");
			}
			let v : T? = array[index];
			if (v != none){
				return v.value;
			} else {
				throw new IllegalIndexException("No element is present at index {{ index }}");
			}
			
		}
		set (value){
			if ( index >= length - 1){
				throw new IllegalIndexException();
			}
			array[index] = value;
		}
	}

	public contains( other: Any) : Boolean {
		for (let item in array){
			if (item.valueEqualsTo(other)){
				return true;
			}
		}
		return false;
	}

// TODO should be public <R> containsall(other: Assortement<R>) given R extends T 
// of other : Assortment<Any>  or other : Assortment<? extends Any> 
	public containsAll( other: Assortment<T>) : Boolean {
		
		if (this.array.size != other.size ){
			return false;
		}

		let iteratorA = this.array.iterator;
		let iteratorB = other.iterator;

		while (iteratorA.moveNext() && iteratorB.moveNext()){
			if (iteratorA.current() != iteratorB.current()){
				return false;
			}
		}
		return true;
	}

	public override asString(){
		mutable let s : String = "[";
		 
		for (i in 0 ..< length ){
			if (i > 0){
				s = s ++ ",";
			}
			s = s ++ array[i]; 
		}

		return s ++ "]";
	}
} 