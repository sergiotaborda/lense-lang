
import lense.core.math.SignedNumber;
import lense.core.math.Real;
import lense.core.math.Whole;
import lense.core.math.Equal;
import lense.core.math.ImaginaryOverReal;

public interface Imaginary extends SignedNumber , Comparable<Imaginary> {

	public implicit constructor valueOf(other : Real) {
		return new ImaginaryOverReal.valueOf(other);
	}

	public real(): Real;

	public plus( other : Imaginary) : Imaginary;

	public minus( other: Imaginary ) : Imaginary;
	
	public multiply(other: Imaginary) : Real;
	
	public divide(other: Imaginary): Real;

	public plus(other: Whole) : Complex;

	public minus( other : Whole) : Complex;

	public multiply( other: Whole) : Imaginary;

	public divide( other : Whole) : Imaginary;

	public plus( other: Real) : Complex;

	public minus( other: Real) : Complex;

	public multiply( other: Real) : Imaginary;

	public divide( other: Real) : Imaginary;

	public symmetric() : Imaginary;

}