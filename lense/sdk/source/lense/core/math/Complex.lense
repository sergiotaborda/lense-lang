
import lense.core.math.Number;
import lense.core.math.Imaginary;
import lense.core.math.Real;
import lense.core.math.ArithmeticException;

public value class Complex implements Number {


	private constructor (real: Real, imaginary: Real);

	public implicit constructor valueOfReal(real: Real){
		return new Complex(real, 0.0);
	}

	public implicit constructor valueOf(img: Imaginary){
		return new Complex(0.0, img.real());
	}

	public implicit constructor retangular(real: Real, img: Real){
		return new Complex(real, img);
	}

	public real() => this.real;

	public imaginary() => this.imaginary;

	public plus( other : Complex) => new Complex(this.real + other.real, this.imaginary + other.imaginary);

	public minus( other : Complex) => new Complex(this.real - other.real, this.imaginary - other.imaginary);

	public  multiply( other : Complex) {
		return new Complex(
				(this.real * other.real) - (this.imaginary * other.imaginary) ,
				(this.real * other.imaginary) + (this.imaginary * other.real)
		);
	}

	public divide( denominator : Complex ) : Complex {
		let magnitude : Real =  denominator.abs();
		if (magnitude.isZero()){
			throw new ArithmeticException("Cannot divide by zero");
		}
		return this.multiply(denominator.conjugate()).divide(magnitude);
	}
	
	public divide( denominator: Real ) => new Complex(this.real.divide(denominator), this.imaginary.divide(denominator));

	public conjugate() =>  new Complex(this.real, -this.imaginary);
	
	public isZero() => real == 0 && imaginary == 0;

	public abs() => real.multiply(real).plus(this.imaginary.multiply(this.imaginary));

	public override equalsTo( other : Any) =>  other is Complex && this.real.equalsTo(other.real) && this.imaginary.equalsTo(other.imaginary);

	public override hashValue() => this.real.hashValue().concat(this.imaginary.hashValue());

	public override asString() : String {
	    var sign : String = "+";
	    if (imaginary.sign() < 0){
	    	sign = " - ";
	    }
		return real.asString() ++ sign ++  imaginary.abs().asString() ++ "i";
	}
}