
import lense.core.lang.String;
import lense.core.math.RealLineElement;
import lense.core.lang.Boolean;
import lense.core.math.Complex;
import lense.core.math.Imaginary;
import lense.core.math.Rational;
import lense.core.math.Natural;
import lense.core.math.Real;
import lense.core.math.Integer;

public interface Whole extends RealLineElement {

	public native implicit  constructor parse( other: String);

	public isOne() : Boolean;

	public plus( n : Imaginary) : Complex;
	public minus( n : Imaginary) : Complex;
	public multiply( n : Imaginary) : Imaginary;
	public divide( n : Imaginary) : Imaginary;
	
	public plus( n : Whole) : Whole;
	public minus( n : Whole) : Whole;
	public divide( n : Whole) : Rational;

	public wholeDivide (other : Whole) : Whole; 
	/{	
		Returns the Remainder, r, of the whole devision such that
		
		D = d * q + r and q = D \ d 
		
		so r = D - (d * (D \ d)) 
		
		
	}/
	public remainder (other : Whole) : Whole; 	

	/{	
		Returns the Modulo, mod, of the arithemtic modulus operation
		
		so D mod d = D - (d * floor(D / d)) 
		
	}/
	public modulo (other : Whole) : Whole; 

	public isNegative() : Boolean;
	public isPositive() : Boolean;

	public abs () : Natural; 
	public gcd( other : Whole) : Natural;

	public asReal() : Real;
	public asInteger() : Integer;
}