import lense.core.io.Console;
import lense.core.lang.Void;
import lense.core.lang.Boolean;
import lense.core.lang.Some;
import lense.core.lang.BitArray;
import lense.core.math.Interval;
import lense.core.math.Natural;
import lense.core.math.Integer;
import lense.core.system.ConsoleApplication;
import lense.core.lang.Any;
import lense.core.math.Int16;
import lense.core.collections.Sequence;
import lense.core.collections.Tuple;
import lense.core.collections.Array;
import lense.core.collections.List;
import lense.core.lang.String;
import lense.core.lang.Binary;
import lense.core.math.Int32;
import lense.core.lang.Byte;
import lense.core.math.Imaginary;
import lense.core.math.Complex;
import lense.core.math.Real;
import lense.core.math.BigNatural;
import lense.core.math.Float64;
import lense.core.math.Rational;
import lense.core.math.Interval;
import lense.core.math.ArithmeticException;
import helloworld.start.Matrix;
import helloworld.start.Dto;
import lense.core.math.equal;
import lense.core.math.smaller;
import lense.core.math.greater;
import lense.core.math.Comparison;
import math.numbers.Sum;
import helloworld.start.Sequences;
import helloworld.start.Kilometer;
import math.numbers.Quaternion;
import math.numbers.j;
import math.numbers.k;

public class Main extends ConsoleApplication {

	public constructor();
	
	public parameter : Integer  {get;} = 99;

	private demoProtectedAccess(){
		
 		let dto = new Dto();

		assert(34 == dto.protectedAccess);
		// assert(34 == dto.noAccess); // uncomment will raise compilation error on private field
	}

	private demoFloat(){
		
 		assert(-0.0 == (0.0).symmetric(), "Symmetric of rational 0.0 is not rational -0.0"); // TODO parser does not understand the secound dot in  0.0.symmetric
 		assert(0.0 == (0.0).symmetric(), "Symmetric of rational 0.0 is not rational 0.0"); // TODO parser does not understand the secound dot in  0.0.symmetric
		assert(new Float32(0.0).symmetric().isNegativeZero(), "Symmetric of float 0.0 is not -0.0");
		assert(-new Float32(0.0) == new Float32(0.0).symmetric(), "Symmetric of float 0.0 is not float -0.0");
		assert(0.0 == new Float32(0.0), "Float 0.0 is not equal to rational 0.0");
		assert(-0.0 == new Float32(0.0), "Float 0.0 is not equal to rational -0.0");

	}
	
	private demoListOfMaybe() {

		let list = new List<Int32?>();
		
		let s : Int32? = 1;
		
		list.add(s);
		
		let r = list[0];
		
		assert (r is Some, "r is not Some");
	}
	
	private applyNames<T, U> ( from : T , to : U) : String {

		let list = new Array<T>.empty();
		let other = new Array<U>.empty();

		return "";
	}

	private duplicate<T> ( source : Array<T> ) : Array<T> {

		if (source.size == 0){
			return new Array<T>.empty();
		}
	
		let other = new Array<T>(source.size, source[0]);
	
		for( let i in source.indexes){
			other[i] = source[i];
		}		

		return other;
	}

	private demoReification(){
	
		let source = [1,2,3];
	    let target = duplicate(source);

		let areTheSame = source === target;

  	   	console.println("Copy and original are the same {{ areTheSame }}" );

	}

	private demoIntErasure_ErasurePossible(){

		let ap : Int32 = 44;
		let bp : Int32= 55;

		let dp = ap &+ bp;

		let gp = ap &* bp;
	
		assert (99 == dp , "dp is not999, is {{ dp }}");

		assert (2420 == gp, "gp is not 2420, is {{ gp }}");

		assert (gp is Int32, "gp is not an Int32");
		assert (dp is Int32, "dp is not an Int32");
		assert (!(dp is Int64), "dp is an Int64");
		assert (dp is Integer, "dp is not an Integer");
		
		for (let i in 0 .. 3){
			ap = ap &+ i;
		}

		assert (50 == ap, "a is not 50, is {{ ap }}");
		
		let list = new List<Int32>();
		
		list.add(ap);
		
		console.println(list);
		console.println(list.size);

		assert(1 == list.size, "List size is not 1");
		assert(!list.empty, "List size is empty");
		
		let x : Int32 = list[0];
		
		let y : Int32 = x &+ 1;
		
		assert (51 == y, "y is not 51, is {{ y }}");
		
	}
	
	private demoLongErasure_ErasurePossible(){

		let ap : Int64 = 44;
		let bp : Int64 = 55;

		let dp = ap &+ bp;

		let gp = ap &* bp;
	
		assert (99 == dp , "dp is not999, is {{ dp }}");

		assert (2420 == gp, "gp is not 2420, is {{ gp }}");

		assert (gp is Int64, "gp is not an Int64");
		assert (dp is Int64, "dp is not an Int64");
		assert (!(dp is Int32), "dp is an Int32");
		assert (dp is Integer, "dp is not an Integer");

		for (let i in 0 .. 3){
			ap = ap &+ i;
		}

		assert (50 == ap, "a is not 50, is {{ ap }}");
		
		let list = new List<Int64>();
		
		list.add(ap);
		
		console.println(list);
		console.println(list.size);

		assert(1 == list.size, "List size is not 1");
		assert(!list.empty, "List size is empty");
		
		let x : Int64 = list[0];
		/{
		let y : Int64 = x &+ 1;
		
		assert (51 == y, "y is not 51, is {{ y }}");
		}/
	}
	
	private demoLongAndIntErasure_NoErasurePossible(){

		let a : Int32 = 4;
		let b : Int32 = 5;

		let c = a + b;
		let d = a &+ b;

		let f = a * b;
		let g = a &* b;
	
		assert (9 == c , "c is not 9, is {{ c }}");
		assert (9 == d , "d is not 9, is {{ d }}");
		assert (20 == f, "f is not 20, is {{ f }}");
		assert (20 == g, "g is not 20, is {{ g }}");

		assert (c is Int32, "c is Int32");
		assert (f is Int32, "f is Int32");
		
		assert (g is Int32, "g is not an Int32");
		assert (d is Int32, "d is not an Int32");
		assert (!(d is Int64), "d is an Int64");
		assert (d is Integer, "d is not an Integer");
		
		for (let i in 0 .. 5){
			a = a &+ i;
		}

		assert (19 == a, "a is not 19, is {{ a }}");
		
		let list = new List<Int32>();
		
		list.add(a);
		
		console.println(list);
		console.println(list.size);
		//console.println(list.empty); // TODO needs boolean boxing
		
		assert(1 == list.size, "List size is not 1");
		assert(!list.empty, "List size is empty");
		
		let w : Int32 = list[0];
		
		let z : Int32 = w &+ 1;
		
		assert (20 == z, "z is not 20, is {{ z }}");
		
	}
	
	private  sum ( a : Int32 , b: Int32) : Int32{
		return a &+ b;
	}
	
	private  isum ( q : Int32 , p: Int32) : Integer {
		return q + p;
	}
	
	private  increment ( a : Int32) : Int32 {
		for (let i in 0 .. 5){
			a = a &+ i;
		}
		return a;
	}
	
	private  incrementTo ( a : Int32, m : Int32) : Int32 {
		for (let j in 0 .. m){
			a = a &+ j;
		}
		return a;
	}
	
	private  incrementTo ( a : Integer, m : Int32) : Integer {
		for (let k in 0 .. m){
			a = a + k;
		}
		return a;
	}
	

	private demoNamedArguments (){

		let t = true;

		let a = range(2, 5, t);
		let b = range(from : 2, to : 5, negated : true);
		let c = range(to : int2(), negated: bool(), from : int1());
		let d = range( 2, negated: true, to : 5);
		let f = range( false,  to : 5, from : 2);

		assert ( a == 3);
		assert ( b == -3);
		assert ( c == 3);
		assert ( d == -3);
		assert ( f == 3);

	}

	private bool() {
		return false;
	}

	private int2() : Natural {
		return 2;
	}

	private int1() : Natural {
		return 5;
	}

	private  range(negated : Boolean,  from : Natural, to : Integer) : Integer{
		let integerFrom : Integer = from;
 
		if (negated){
			return to - integerFrom;
		} else {
			return integerFrom - to;
		}
	} 

	private  range( from : Integer, to : Integer , negated : Boolean) : Integer{
		if (negated){
			return to - from;
		} else {
			return from - to;
		}
		
	} 

	private demoBinding() {
		let km = new Kilometer();
 

		let c = 1 km;

		let q : Quaternion = 4.0k + 3.0j + 2i + 1.0;

		assert (  new Quaternion(1,2,3,4) == q , " {{ q }} is not {{ new Quaternion(1,2,3,4) }}");

	}

	private demoBigNumbers(){
	
		let a = new Natural.parse("18446744073709551615");
		let b = new Natural.parse("18446744073709551619");
		
		assert ( b == (a + 4) , "18446744073709551615 + 4 is not 18446744073709551619 is {{ a + 4 }}" );
		
	}

  	public override onStart()  {

	

  	 	console.println("Begin " ++ this.type().name); 

		demoLongAndIntErasure_NoErasurePossible();

		demoIntErasure_ErasurePossible();
		demoBigNumbers();
		demoFloat();

		demoBinding();

		demoReification();

		demoEnhacements();

		demoMaybeArray();  	 	

		demoList();  	 	

  		demoTryCatch();
  	 		
		demoDto();
  	 	
		demoMatrix();

		demoBitArray();

		demoSwitchAlgebric();
  	 
  		let interval : Interval<Natural> = |[ 2, 19 )|;
		let interval2 : Interval<Integer> = |[ -2, 19 )|; // TODO better promotions

		console.println(interval2);

		let a  = interval2.start;
		let b  = interval2.end;
		 
  	 	let im  = 2i; 
  	 	
  	 	let cx = 3 + 4i;

  	    let r = cx.abs();
  	 
  	 	console.println("Complex is : {{ cx }} with magnitude :{{ r }} "); 
  	 
  	 	let bx  = 4 +2i;

  	   console.println("Other Complex is : {{ bx }} ");
  	 
  	   console.println("Product is : {{ bx * cx }}");
  	 
  	 	let rational : Any = 0.3;
  	 	
  	 	console.println("");
  	 	
  	 	if (rational is Rational){
  	 		console.println("Decimal literals are rational");
  	 		let dec : Float64 = toRational(rational);  
  	 		console.println("dec is {{ dec }}");
  	 	} else {
  	 		console.println("Decimal literals are NOT rational");
  	 	}
  	 	 
  	    let decimal : Float64 = 0.5;  
  	 	   
  	 	assert ( 3/4 == 3/4);
  	 	
  	 	assert(  8 / 3 is Rational , "8/3 is not Rational");
  	 	assert(  8 \ 3 is Whole , "8 \ 3 is not Whole");
  	 	
  	 	let ratio = 8 / 3;
  	 	let wholeDivision = 8 \ 3;
  	 	let remainder = 8 % 3;

		assert (8 == 3 * wholeDivision + remainder , " Q = d * q + r is wrong");
  	 	
		let inverted = 1 / ratio;
	
		assert( 1 ==  ratio.sign() , " Sign of {{ ratio }} is not 1");

		assert( inverted ==  ratio.invert() , " 1 / x is not the same as x.invert()");

		assert( inverted == 3/8 , " Inversion is wrong");

		let fakeInverted = ratio / 1;

		assert( fakeInverted == ratio , "Fake invert is wrong");

  	 	let doubleInverted = 2 / ratio;

		assert( doubleInverted == 3/4 , "Double Inverter is wrong");

  	  // TODO correct \ escaping inside string	
  	 	console.println("8 / 3 = {{ ratio }} and 8 \ 3 ={{wholeDivision }}  so  8 ={{ wholeDivision }} * 3 + {{ remainder }}");
  	 	
   // TODO verifiy if a variable was already defined
 
  	    let pow : Natural = 4 ^^ 3;
  	    let powNeg : Rational = 4 ^^ -3;
  	   
		assert ( 64 == pow , "  4 ^^ 3 is not 64 ");

		assert ( 1/ 64 == powNeg , "  4 ^^ -3 is not 1/64 ");
  	  
  	    let distance = dist(3, 4); 

		let ref = 5.0;

		if (ref is Rational){
			console.println("Ref is Rational ");
		} else {
			console.println("Ref is not Rational");
		}
		
  	 	
	// TODO natural == decimal
		assert ( 5.0 == distance, "Distance is not 5, is {{ distance }}");

  	 	console.println(" distance srqt(3x3 + 4x4) = {{ distance }}");
  	 	console.println(" distance srqt(3x3 + 4x4) = {{ hypot(3, 4) }}");
  	 	
  	    console.println(" distance srqt(1 + 1) = {{ dist(1, 1) }}");
  	    console.println(" distance srqt(1 + 1) = {{ hypot(1, 1) }}");
  	    
  	    console.println(" distance srqt(5 + 7) = {{ dist(5, 7) }}");
  	    console.println(" distance srqt(5 + 7) = {{ hypot(5, 7) }}");
  	    
  	    console.println(" reduced 50/ 60 = {{ 50 / 60 }} = 5/6");
  	    console.println(" reduced 20/ 5 = {{ 20 / 5 }} = 4");
  	    
  	 	let dc = 0.5 + 4i;
  	 	
		assert ( new Complex.rectangular(0.5, 4)  == dc , " Complex is not 0.5+4i");

  	 	let n = #EFA2;
  	 	
  	 	let p : Integer = parameter; 
  	 	
		assert ( 99 == parameter, " Parameter is not 99");
		assert ( 99 == p);
  
  	 	let binary = $1011_1011_0010; 
  	 	
  	 	mutable let byte : Byte = $1011_0110; 
  	   
  	    console.println("byte is {{ byte }}");
  	   
  	   	byte = binary; // will ignore higher bits
  	   
  	    console.println("byte is {{ byte }}");
  	    
  	  	let number : Int32 = binary;
  	  	 
  		let  array = [1 , 2, -3, 4, 5];
  	
  		//console.println("sequence is {{ array }}");
  		 
  		//console.println("position 2 has value {{ array[2] }}");
  		
  		//console.println("literal sequence is {{ [1 , 2, 3, 4, 5]  }}"); 
  	 	 
  		let barray : Array<Boolean>= [false, true, true, false];
  		
  		console.println(barray);
  		
  		assert(!barray[0], "barray[0] is not false");
  		assert(barray[1], "barray[1] is not true");
  		assert(barray[2], "barray[2] is not true");
  		assert(!barray[3], "barray[3] is not false");
  		
 
  		let convertedBitArray : BitArray = barray;
  		let bitArray :  BitArray = new BitArray(4);
		
		bitArray[0] = false;
		bitArray[1] = true;
		bitArray[2] = true;
		bitArray[3] = false;

		assert ( bitArray == convertedBitArray , " BitArray created from array of booleans is not equal to fixed bit array");

  	
  	  	let map = { 1 -> "a", 2 -> "b", 3 -> "c" };
  	 
  	  	console.println("Map is : {{ map }}");
  	   
  		let  tuple = ("Hello", 6);
  		
		assert ( "Hello" == tuple[0] , " Tuple first value is not `Hello` ");
		assert ( 6 == tuple[1] , " Tuple second value is not 6 ");

  		let  tuple3 = ("Hi", 3, true); // TODO use true in the last value
  		
		assert ( "Hi" == tuple3[0] , " Tuple first value is not `Hi` ");
		assert ( 3 == tuple3[1] , " Tuple second value is not 3 ");
		assert ( true == tuple3[2] , " Tuple second value is not 4.0 ");
  	
  	    let tuple1 : (String) = ("Hello single expression to tuple");
  		
		assert ( "Hello single expression to tuple" == tuple1[0] , " Tuple first value is not `Hello single expression to tuple` ");

    	let  tuple0 : String = ("Hello single expression");
  		
		assert ( "Hello single expression" == tuple0 , " Tuple first value is not `Hello single expression` ");


  	    for(let y in 1..10){
  	     
  	     	console.println(y);
  	     	
  	     	if ( y == 4){
  	     		console.println("Hello Four");
  	     	} else if (y > 4){
  	     		console.println("Bigger than Four");
  	     	}  else if (y < 4){
  	     		console.println("Less than Four");
  	     	}
  	        
  	     }
  	     
  	     
  	     console.println(getlength([1,2]));
  	    
  	    console.println("End");
  	 
  	}
	
	public demoEnhacements(){

		let seq = [1,2,3,4,5];

		let sum = seq.sum();

  		assert (sum == 15 ); 

		let alfa = [ "a", "b", "c"];

		let a = alfa.first();

		let maybeA : String? = "a";

		assert (a == maybeA ); 
	}


	public dist(x : Integer, y : Integer) : Real {
		return (x ^^ 2 + y ^^ 2) ^^ 0.5;
	}
	
	public hypot(x : Real, y : Real) : Real {

		let ax = x.abs();
		let ay = y.abs();

		let max = ax >= ay ? ax : ay;
		let min = ax >= ay ? ay : ax;


		
	    console.println(" max = {{ max }}");
	    console.println(" min = {{ min }}");
		
		let r = min / max ;
		
		console.println("r = {{ r }}");
		
		let k = r ^^ 2;
		 
		console.println("r ^^ 2 = {{ k }}");
		console.println("j = {{ 1.0 + k }}");
		 
		return max * ((1.0 + r ^^ 2) ^^ 0.5);

	}
	
	public toRational(number : Rational) : Rational => number;
	
	public toRationalFromAny( any : Any) : Rational{
		assert( any is Rational);
		return any;
	}

  	public getlength ( seq : Sequence<Natural>) => seq.size; 

	private demoList(){
		
		let arr : Array<Natural> = [1,2,3,4,5];

		for (a in arr){
			console.println("Element {{ a }}" );
		}

		let list : List<Natural> = arr; // implict copy 

		console.println("List size is {{ list.size }}");
		console.println("List is {{ list }}");
	}

	public demoTryCatch(){
 		try {
  	 		let f = 4 / 0;
  	 		console.println("f is " + f);
  	 	} catch (e : ArithmeticException){
  	 		console.println("try catch worked");
  	 	}
	}

	public demoDto(){

  	 	let dto = new Dto();
  	 	
		assert ( dto.age == dto.constant);
		assert ( dto.age == 34);

		assert ( dto.name == none);

  	 	console.println("name is " + dto.name);
  	 	console.println("age is " + dto.age);
  	 		
  	 	dto.name = "dto"; // directly assign to a optional property
  	 	
  	 	let address = dto.address;
  	 	
  	 	console.println("name is " + dto.name);
  	 	console.println("age is " + dto.age);
	}

	public demoMatrix(){

  		let matrix  = new Matrix<Natural>(rowsCount: 3, columnsCount: 3, seed: 0);
  	
  		matrix[2,2] = 4;
  	 
  	    let center = matrix[2,2];
  		
  		console.println(center);
	}

	public demoMaybeArray (){
		let array : Array<String?> = ["a", none , "b", "c", none];

 		console.println("array with none is  " + array);

		let a : String? = "a";
  
 		// TODO transform == to maybe when other side is not a maybe to .is(a)
		assert (array[0] == a);
		assert (array[1] == none);
	}

	public demoBitArray(){
		
		let bitArray = new BitArray($1100_1101); 
	

		assert (new BitArray($1_1001_1010) == bitArray << 1);
		assert (new BitArray($0110_0110) == bitArray >> 1);
	}

	public demoSwitchAlgebric(){

		let comparison = 1 <=> 3;
		switch(comparison){
			case (equal){
				console.println("equal ");
			}
			case (smaller){
				console.println("smaller");
			}
		    case(greater) {
				console.println("greater");
			}
		}

		let b = true;
		switch(b){
			case (true) { console.println("true"); }
			case (false) { console.println("false"); }
		}

		let n = 4;
		switch(n){
			case (1) {console.println("1");} 
			case (2) {console.println("2");}
			case (4) {console.println("4");}
			default {console.println("8");}    
		}
	} 
}

