import lense.core.io.Console;
import lense.core.lang.Void;
import lense.core.lang.Boolean;
import lense.core.lang.BitArray;
import lense.core.math.Interval;
import lense.core.math.Natural;
import lense.core.math.Integer;
import lense.core.system.ConsoleApplication;
import lense.core.lang.Any;
import lense.core.math.Int16;
import lense.core.collections.Sequence;
import lense.core.collections.Tuple;
import lense.core.collections.Array;
import lense.core.collections.List;
import lense.core.lang.String;
import lense.core.lang.Binary;
import lense.core.math.Int32;
import lense.core.lang.Byte;
import lense.core.math.Imaginary;
import lense.core.math.Complex;
import lense.core.math.Real;
import lense.core.math.Decimal64;
import lense.core.math.Rational;
import lense.core.math.Interval;
import lense.core.math.ArithmeticException;
import helloworld.start.Matrix;
import helloworld.start.Dto;
import lense.core.math.equal;
import lense.core.math.smaller;
import lense.core.math.greater;
import lense.core.math.Comparison;

public class Main extends ConsoleApplication {

	public constructor();
	
	public let parameter : Integer = 99 {get;};
	
	
	private applyNames<T, U> ( from : T , to : U) : String {

		let list = new Array<T>();
		let other = new Array<U>();

		return "";
	}

	private duplicate<T> ( source : Array<T> ) : Array<T> {

		if (source.size == 0){
			return new Array<T>.empty();
		}
	
		let other = new Array<T>(source.size, source[0]);
	
		for( let i in source.indexes){
			other[i] = source[i];
		}		

		return other;
	}

	private demoReification(){
	
		let source = [1,2,3];
	    let target = duplicate(source);

		let areTheSame = source === target;

  	   	console.println("Copy and original are the same {{ areTheSame }}" );

	}

  	public override onStart()  {


		
  	 	console.println("Begin " ++ this.type().name); // ambiguity a ++ b  or a   ++b

		demoReification();

		demoMaybeArray();  	 	

		demoList();  	 	

  		demoTryCatch();
  	 		
		demoDto();
  	 	
		demoMatrix();

		demoBitArray();

		demoSwitchAlgebric();
  	 
  		var interval : Interval<Natural> = |[ 2, 19 )|;
		var interval2 : Interval<Integer> = |[ -2, 19 )|; // TODO better promotions

		console.println(interval2);

		var a  = interval2.start;
		var b  = interval2.end;
		 
  	 	var im  = 2i; 
  	 	
  	 	var cx = 3 + 4i;
  	 
  	    var r = cx.abs();
  	 
  	 	console.println("Complex is : {{ cx }} with magnitude :{{ r }} "); 
  	 
  	 	var bx  = 4 +2i;

  	   console.println("Other Complex is : {{ bx }} ");
  	 
  	   console.println("Product is : {{ bx * cx }}");
  	 
  	 	var rational : Any = 0.3;
  	 	
  	 	console.println("");
  	 	
  	 	if (rational is Rational){
  	 		console.println("Decimal literals are rational");
  	 		var dec : Decimal64 = toRational(rational);  
  	 		console.println("dec is {{ dec }}");
  	 	} else {
  	 		console.println("Decimal literals are NOT rational");
  	 	}
  	 	 
  	    var decimal : Decimal64 = 0.5;  
  	 	   
  	 	assert ( 3/4 == 3/4);
  	 	
  	 	assert(  8 / 3 is Rational);
  	 	assert(  8 \ 3 is Whole);
  	 	
  	 	var ratio = 8 / 3;
  	 	var wholeDivision = 8 \ 3;
  	 	var remainder = 8 % 3;
  	 	
  	 
  	  // TODO correct \ escaping inside string	
  	 	console.println("8 / 3 = {{ ratio }} and 8 \ 3 ={{wholeDivision }}  so  8 ={{ wholeDivision }} * 3 + {{ remainder }}");
  	 	
   // TODO verifiy if a variable was already defined
  	   var pow : Natural = 4 ^^ 3;
  	   var powNeg : Rational = 4 ^^ -3;
  	   
  	    console.println(" 4 ^^ 3 = {{ pow }} (64)");
  	    console.println(" 4 ^^ -3 = {{ powNeg }} (1/64)");
  	  
  	     var distance = dist(3, 4); 
  	 	
  	 	console.println(" distance srqt(3x3 + 4x4) = {{ distance }}");
  	 	console.println(" distance srqt(3x3 + 4x4) = {{ hypot(3, 4) }}");
  	 	
  	    console.println(" distance srqt(1 + 1) = {{ dist(1, 1) }}");
  	    console.println(" distance srqt(1 + 1) = {{ hypot(1, 1) }}");
  	    
  	    console.println(" distance srqt(5 + 7) = {{ dist(5, 7) }}");
  	    console.println(" distance srqt(5 + 7) = {{ hypot(5, 7) }}");
  	    
  	    console.println(" reduced 50/ 60 = {{ 50 / 60 }} = 5/6");
  	    console.println(" reduced 20/ 5 = {{ 20 / 5 }} = 4");
  	    
  	 	var dc = 0.5 + 4i;
  	 	
  	 	console.println("Complex is : {{ dc }} "); 
  
  	 	   
  	 	var n = #EFA2;
  	 	
  	 	var p : Integer = parameter; 
  	 	
  	 	console.println("parameter p is 99 : {{ p }}");
  	 	 
  	 	console.println("parameter is : {{ parameter }}");
  	 	 	
  	 	var binary = $1011_1011_0010; 
  	 	
  	 	var byte : Byte = $1011_0110; 
  	   
  	    console.println("byte is {{ byte }}");
  	   
  	   	byte = binary; // will ignore higher bits
  	   
  	    console.println("byte is {{ byte }}");
  	    
  	  	var number : Int32 = binary;
  	  	 
  		var  array = [1 , 2, -3, 4, 5];
  	
  		console.println("sequence is {{ array }}");
  		 
  		console.println("position 2 has letue {{ array[2] }}");
  		
  		console.println("literal sequence is {{ [1 , 2, 3, 4, 5]  }}"); 
  	 	 
  		var barray : Array<Boolean>= [false, true, true, false];
  		
  		console.println("boolean array  is {{ barray }}"); 
  				
  		assert(!barray[0]);
  		assert(barray[1]);
  		assert(barray[2]);
  		assert(!barray[3]);
  		
 
  		var bitArray : BitArray = barray;
  		
  		console.println("BitArray is : {{ bitArray }}");
  	
  	  	var map = { 1 : "a", 2 : "b", 3 : "c" };
  	 
  	  	console.println("Map is : {{ map }}");
  	   
  		var  tuple = ("Hello", 6);
  		
  		console.println(tuple[0]);
  		console.println(tuple[1]);
  		
  		var  tuple3 = ("Hello", 6, "ha!");
  		
  		console.println(tuple3[0]);
  		console.println(tuple3[1]);
  	    console.println(tuple3[2]);
  	    
  	    var tuple1 : (String) = ("Hello single expression to tuple");
  		
  		console.println(tuple1[0]);

    	var  tuple0 : String = ("Hello single expression");
  		
  		console.println(tuple0);
  

  	    for(let y in 1..10){
  	     
  	     	console.println(y);
  	     	
  	     	if ( y == 4){
  	     		console.println("Hello Four");
  	     	} else if (y > 4){
  	     		console.println("Bigger than Four");
  	     	}  else if (y < 4){
  	     		console.println("Less than Four");
  	     	}
  	        
  	     }
  	     
  	     
  	     console.println(getlength([1,2]));
  	    
  	    console.println("End");
  	 
  	}


	public dist(x : Integer, y : Integer) : Real {
		return (x ^^ 2 + y ^^ 2) ^^ 0.5;
	}
	
	public hypot(x : Real, y : Real) : Real {

		let ax = x.abs();
		let ay = y.abs();

		let max = ax >= ay ? ax : ay;
		let min = ax >= ay ? ay : ax;


		
	   console.println(" max = {{ max }}");
	   console.println(" min = {{ min }}");
		
		let r = min / max ;
		
		  console.println("r = {{ r }}");
		  let k = r ^^ 2;
		    console.println("r ^^ 2 = {{ k }}");
		 console.println("j = {{ 1.0 + k }}");
		 
		return max * (1.0 + r ^^ 2) ^^ 0.5;

	}
	
	public toRational(number : Rational) : Rational => number;
	
	public toRationalFromAny( any : Any) : Rational{
		assert( any is Rational);
		return any;
	}

  	public getlength ( seq : Sequence<Natural>) => seq.size; 

	private demoList(){
		
		let arr : Array<Natural> = [1,2,3,4,5];

		for (a in arr){
			console.println("Element {{ a }}" );
		}

		let list : List<Natural> = arr; // implict copy 

		console.println("List size is {{ list.size }}");
		console.println("List is {{ list }}");
	}

	public demoTryCatch(){
 		try {
  	 		var f = 4 / 0;
  	 		console.println("f is " + f);
  	 	} catch (e : ArithmeticException){
  	 		console.println("try catch worked");
  	 	}
	}

	public demoDto(){

  	 	var dto = new Dto();
  	 	
		assert ( dto.age == dto.constante);
		assert ( dto.age == 34);

		assert ( dto.name == none);

  	 	console.println("name is " + dto.name);
  	 	console.println("age is " + dto.age);
  	 		
  	 	dto.name = "dto"; // directly assign to a optional property
  	 	
  	 	var address = dto.address;
  	 	
  	 	console.println("name is " + dto.name);
  	 	console.println("age is " + dto.age);
	}

	public demoMatrix(){

  		let matrix  = new Matrix<Natural>(3,3, 0);
  	
  		matrix[2,2] = 4;
  	 
  	    let center = matrix[2,2];
  		
  		console.println(center);
	}

	public demoMaybeArray (){
		let array : Array<String?> = ["a", none , "b", "c", none];

 		console.println("array with none is  " + array);

		let a : String? = "a";
  
 		// TODO transform == to maybe when other side is not a maybe to .is(a)
		assert (array[0] == a);
		assert (array[1] == none);
	}

	public demoBitArray(){
		
		let bitArray = new BitArray($1100_1101); 
	

		assert (new BitArray($1_1001_1010) == bitArray << 1);
		assert (new BitArray($0110_0110) == bitArray >> 1);
	}

	public demoSwitchAlgebric(){

		let obj = 1 <=> 3;
		switch(obj){
			case (equal){
				console.println("equal ");
			}
			case (smaller){
				console.println("smaller");
			}
		    case(greater) {
				console.println("greater");
			}
		}

		let b = true;
		switch(b){
			case (true) { console.println("true"); }
			case (false) { console.println("false"); }
		}

		let n = 4;
		switch(n){
			case (1) {console.println("1");} 
			case (2) {console.println("2");}
			case (4) {console.println("4");}
			default {console.println("8");}    
		}
	} 
}

