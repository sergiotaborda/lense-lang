import lense.core.io.Console;
import lense.core.lang.Void;
import lense.core.lang.Boolean;
import lense.core.math.Natural;
import lense.core.math.Integer;
import lense.core.system.ConsoleApplication;
import lense.core.lang.Any;
import lense.core.math.Int16;
import lense.core.collections.Sequence;
import lense.core.collections.Tuple;
import lense.core.lang.String;
import lense.core.lang.Binary;
import lense.core.math.Int32;
import lense.core.lang.Byte;
import lense.core.math.Imaginary;
import lense.core.math.Complex;
import lense.core.math.Real;
import lense.core.math.Decimal64;
import lense.core.math.Rational;
import lense.core.math.Interval;
import helloworld.start.Matrix;

public class Main extends ConsoleApplication {

	public constructor();
	
	public parameter : Integer {} = 99;
	

  	public onStart()  {
  	
  	 	console.println("Begin");
  	 	
  	 	try {
  	 		var f = 4 / 0;
  	 		console.println("f is " + f);
  	 	} catch (e : ArithmeticException){
  	 		console.println("try catch worked");
  	 	}
  	 		
  	 	var dto = new Dto();
  	 	
  	 	console.println("name is " + dto.name);
  	 	console.println("age is " + dto.age);
  	 		
  	 	dto.name = "dto";
  	 	dto.age = 51;
  	 	
  	 	var address = dto.address;
  	 	
  	 	console.println("name is " + dto.name);
  	 	console.println("age is " + dto.age);
  	 	
  		val matrix  = new Matrix<Natural>(3,3, 0);
  	
  		matrix[2,2] = 4;
  	 
  	    val center = matrix[2,2];
  		
  		console.println(center);
  	 
  		var interval : Interval<Natural> = |[ 2, 19 )|;
		var interval2 : Interval<Integer> = |[ -2, 19 )|; // TODO better promotions

		console.println(interval2);

		var a  = interval2.start;
		var b  = interval2.end;
		 
  	 	var im  = 2i; 
  	 	
  	 	var cx = 3 + 4i;
  	 
  	    var r = cx.abs();
  	 
  	 	console.println("Complex is : {{ cx }} with magnitude :{{ r }} "); 
  	 
  	 	var bx  = 4 +2i;

  	   console.println("Other Complex is : {{ bx }} ");
  	 
  	   console.println("Product is : {{ bx * cx }}");
  	 
  	 	var rational : Any = 0.3;
  	 	
  	 	console.println("");
  	 	
  	 	if (rational is Rational){
  	 		console.println("Decimal literals are rational");
  	 		var dec : Decimal64 = toRational(rational);  
  	 		console.println("dec is {{ dec }}");
  	 	} else {
  	 		console.println("Decimal literals are NOT rational");
  	 	}
  	 	 
  	    var decimal : Decimal64 = 0.5;  
  	 	   
  	 	assert ( 3/4 == 3/4);
  	 	
  	 	var dc = 0.5 + 4i;
  	 	
  	 	console.println("Complex is : {{ dc }} "); 
  
  	 	   
  	 	var n = #EFA2;
  	 	
  	 	var p : Integer = parameter; 
  	 	
  	 	console.println("parameter p is 99 : {{ p }}");
  	 	 
  	 	parameter = 48;
  	 	
  	 	console.println("parameter is : {{ parameter }}");
  	 	 	
  	 	var binary = $1011_1011_0010; 
  	 	
  	 	var byte : Byte = $1011_0110; 
  	   
  	    console.println("byte is {{ byte }}");
  	   
  	   	byte = binary; // will ignore higher bits
  	   
  	    console.println("byte is {{ byte }}");
  	    
  	  	var number : Int32 = binary;
  	  	 
  		var  array = [1 , 2, -3, 4, 5];
  	
  		console.println("sequence is {{ array }}");
  		 
  		console.println("position 2 has value {{ array[2] }}");
  		
  		console.println("literal array is {{ [1 , 2, 3, 4, 5]  }}"); 
  	 	 
  	
  	  	var map = { 1 : "a", 2 : "b", 3 : "c" };
  	 
  	  	console.println("Map is : {{ map }}");
  	   
  		var  i  = 23;
  		var  j : Integer = ++i;
  		
  		console.println("Pre increment of 23 is {{j}} = 24 with value at {{i}} = 24");
  		
  		i= 23;
  		j = i++;
  			
  		console.println("Pos increment of 23 is {{j}} = 23 with value at {{i}} = 24");
  		
  		var  tuple = ("Hello", 6);
  		
  		console.println(tuple[0]);
  		console.println(tuple[1]);
  		
  		var  tuple3 = ("Hello", 6, "ha!");
  		
  		console.println(tuple3[0]);
  		console.println(tuple3[1]);
  	    console.println(tuple3[2]);
  	    
  	    var tuple1 : (String) = ("Hello single expression to tuple");
  		
  		console.println(tuple1[0]);

    	var  tuple0 : String = ("Hello single expression");
  		
  		console.println(tuple0);
  
  		var x  = 8;
  		
  	     console.println("{{x}} plus {{j}} is {{ x + j }}");

  	    for(val y in 1..10){
  	     
  	     	console.println(y);
  	     	
  	     	if ( y == 4){
  	     		console.println("Hello Four");
  	     	} else if (y > 4){
  	     		console.println("Bigger than Four");
  	     	}  else if (y < 4){
  	     		console.println("Less than Four");
  	     	}
  	        
  	     }
  	     
  	     var k  = 4;
  	
  		console.println("k is {{ k }}");
  	
  	     var u : Integer = k;
  	     while (u != 0){
  	     		console.println("K is {{ k }}");
  	     		console.println("U is {{ u }}");
  	     		u = apply(console , --u, --u);
  	     }
  	     
  	     u= k;
  	     while (u != 0){
  	     		console.println("K is {{ k }}");
  	     		console.println("U is {{ u }}");
  	     		u = apply(console , u--, u--);
  	     }
  	     
  	     console.println(getlength([1,2]));
  	    
  	    console.println("End");
  	 	
  	}

	public toRational(number : Rational) : Rational => number;
	
	public toRationalFromAny( any : Any) : Rational{
		assert( any is Rational);
		return any;
	}

  	public getlength ( seq : Sequence<Natural>) => seq.size; 
  	
  	public apply (c : Console , k : Integer, o : Integer)  {
  	
  		console.println("Arg 1  is {{ k }}");
  		console.println("Arg 2  is {{ o }}");
  		
  		return o;
  	}


}