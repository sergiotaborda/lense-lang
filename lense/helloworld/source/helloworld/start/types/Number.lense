
import helloworld.start.types.MultiplicativeMonoid;
import helloworld.start.types.AdditiveMonoid;

public value class Number satisfies MultiplicativeMonoid<Number> , AdditiveMonoid<Number> {


	public satisfy zero() : Number {
		return new Number(0);
	}

	public satisfy one() : Number {
		return new Number(1);
	}

	public satisfy timesOperator(a : Number, b : Number) : Number {
		return new Number(a.value * b.value);
	}

	public satisfy plusOperator(a : Number, b : Number) : Number {
		return new Number(a.value + b.value);
	}

	public implicit constructor (protected value : Integer); // change to private and validate in compiler that statisfy do not use privates


	public override equalsTo(other : Any) : Boolean => other is Number && other.value == this.value;

	public override hashValue() : HashValue => value.hashValue(); 
	
	public override asString() : String => value.asString();
	

}