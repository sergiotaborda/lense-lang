package lense.compiler;
import compiler.AbstractGrammar;
import compiler.parser.EmptyTerminal;
import compiler.parser.Identifier;
import compiler.parser.NonTerminal;
import compiler.parser.Terminal;
import compiler.parser.Text;
import compiler.parser.Numeric;

public abstract class AbstractLenseGrammar extends AbstractGrammar {

	public AbstractLenseGrammar (){
		super();
	}

	protected NonTerminal defineGrammar() {

		NonTerminal unit = addNonTerminal(NonTerminal.of("unit"));
		NonTerminal moduleDeclaration = addNonTerminal(NonTerminal.of("moduleDeclaration"));
		NonTerminal moduleBody = addNonTerminal(NonTerminal.of("moduleBody"));
		NonTerminal moduleMemberDeclarations = addNonTerminal(NonTerminal.of("moduleMemberDeclarations"));
		NonTerminal moduleMemberDeclaration = addNonTerminal(NonTerminal.of("moduleMemberDeclaration"));
		NonTerminal moduleImport = addNonTerminal(NonTerminal.of("moduleImport"));
		NonTerminal versionMatchLiteral = addNonTerminal(NonTerminal.of("versionMatchLiteral"));
		NonTerminal moduleExport = addNonTerminal(NonTerminal.of("moduleExport"));
		NonTerminal packageDeclaration = addNonTerminal(NonTerminal.of("packageDeclaration"));
		NonTerminal qualifiedName = addNonTerminal(NonTerminal.of("qualifiedName"));
		NonTerminal importDeclarations = addNonTerminal(NonTerminal.of("importDeclarations"));
		NonTerminal importDeclaration = addNonTerminal(NonTerminal.of("importDeclaration"));
		NonTerminal importTypes = addNonTerminal(NonTerminal.of("importTypes"));
		NonTerminal importName = addNonTerminal(NonTerminal.of("importName"));
		NonTerminal typeDeclarations = addNonTerminal(NonTerminal.of("typeDeclarations"));
		NonTerminal typeDeclaration = addNonTerminal(NonTerminal.of("typeDeclaration"));
		NonTerminal classDeclaration = addNonTerminal(NonTerminal.of("classDeclaration"));
		NonTerminal implementsInterfaces = addNonTerminal(NonTerminal.of("implementsInterfaces"));
		NonTerminal interfaceDeclaration = addNonTerminal(NonTerminal.of("interfaceDeclaration"));
		NonTerminal extendsInterfaces = addNonTerminal(NonTerminal.of("extendsInterfaces"));
		NonTerminal extendsInterfaceType = addNonTerminal(NonTerminal.of("extendsInterfaceType"));
		NonTerminal interfaceBody = addNonTerminal(NonTerminal.of("interfaceBody"));
		NonTerminal interfaceMemberDeclarations = addNonTerminal(NonTerminal.of("interfaceMemberDeclarations"));
		NonTerminal interfaceMemberDeclaration = addNonTerminal(NonTerminal.of("interfaceMemberDeclaration"));
		NonTerminal constantDeclaration = addNonTerminal(NonTerminal.of("constantDeclaration"));
		NonTerminal imutabilityModifier = addNonTerminal(NonTerminal.of("imutabilityModifier"));
		NonTerminal abstractMethodDeclaration = addNonTerminal(NonTerminal.of("abstractMethodDeclaration"));
		NonTerminal annotations = addNonTerminal(NonTerminal.of("annotations"));
		NonTerminal annotation = addNonTerminal(NonTerminal.of("annotation"));
		NonTerminal genericTypesDeclaration = addNonTerminal(NonTerminal.of("genericTypesDeclaration"));
		NonTerminal superDeclaration = addNonTerminal(NonTerminal.of("superDeclaration"));
		NonTerminal classBody = addNonTerminal(NonTerminal.of("classBody"));
		NonTerminal classBodyDeclarations = addNonTerminal(NonTerminal.of("classBodyDeclarations"));
		NonTerminal classBodyDeclaration = addNonTerminal(NonTerminal.of("classBodyDeclaration"));
		NonTerminal classMemberDeclaration = addNonTerminal(NonTerminal.of("classMemberDeclaration"));
		NonTerminal fieldDeclaration = addNonTerminal(NonTerminal.of("fieldDeclaration"));
		NonTerminal type = addNonTerminal(NonTerminal.of("type"));
		NonTerminal tupleTypes = addNonTerminal(NonTerminal.of("tupleTypes"));
		NonTerminal parametricTypes = addNonTerminal(NonTerminal.of("parametricTypes"));
		NonTerminal parametricType = addNonTerminal(NonTerminal.of("parametricType"));
		NonTerminal varianceModifier = addNonTerminal(NonTerminal.of("varianceModifier"));
		NonTerminal variableName = addNonTerminal(NonTerminal.of("variableName"));
		NonTerminal methodDeclaration = addNonTerminal(NonTerminal.of("methodDeclaration"));
		NonTerminal methodHeader = addNonTerminal(NonTerminal.of("methodHeader"));
		NonTerminal methodBody = addNonTerminal(NonTerminal.of("methodBody"));
		NonTerminal block = addNonTerminal(NonTerminal.of("block"));
		NonTerminal formalParameterList = addNonTerminal(NonTerminal.of("formalParameterList"));
		NonTerminal formalParameter = addNonTerminal(NonTerminal.of("formalParameter"));
		NonTerminal blockStatements = addNonTerminal(NonTerminal.of("blockStatements"));
		NonTerminal blockStatement = addNonTerminal(NonTerminal.of("blockStatement"));
		NonTerminal statement = addNonTerminal(NonTerminal.of("statement"));
		NonTerminal returnStatement = addNonTerminal(NonTerminal.of("returnStatement"));
		NonTerminal breakStatement = addNonTerminal(NonTerminal.of("breakStatement"));
		NonTerminal continueStatement = addNonTerminal(NonTerminal.of("continueStatement"));
		NonTerminal tryStatement = addNonTerminal(NonTerminal.of("tryStatement"));
		NonTerminal resource = addNonTerminal(NonTerminal.of("resource"));
		NonTerminal catches = addNonTerminal(NonTerminal.of("catches"));
		NonTerminal catchClause = addNonTerminal(NonTerminal.of("catchClause"));
		NonTerminal ntfinally = addNonTerminal(NonTerminal.of("finally"));
		NonTerminal expressionStatement = addNonTerminal(NonTerminal.of("expressionStatement"));
		NonTerminal statementExpression = addNonTerminal(NonTerminal.of("statementExpression"));
		NonTerminal localVariableDeclarationStatement = addNonTerminal(NonTerminal.of("localVariableDeclarationStatement"));
		NonTerminal initializer = addNonTerminal(NonTerminal.of("initializer"));
		NonTerminal arrayInitializer = addNonTerminal(NonTerminal.of("arrayInitializer"));
		NonTerminal tupleInitializer = addNonTerminal(NonTerminal.of("tupleInitializer"));
		NonTerminal arrayInitializerVariables = addNonTerminal(NonTerminal.of("arrayInitializerVariables"));
		NonTerminal initializerVariable = addNonTerminal(NonTerminal.of("initializerVariable"));
		NonTerminal tupleInitializerVariables = addNonTerminal(NonTerminal.of("tupleInitializerVariables"));
		NonTerminal mapInitializer = addNonTerminal(NonTerminal.of("mapInitializer"));
		NonTerminal mapInitializerVariables = addNonTerminal(NonTerminal.of("mapInitializerVariables"));
		NonTerminal mapInitializerPair = addNonTerminal(NonTerminal.of("mapInitializerPair"));
		NonTerminal mapInitializerVariable = addNonTerminal(NonTerminal.of("mapInitializerVariable"));
		NonTerminal whileStatement = addNonTerminal(NonTerminal.of("whileStatement"));
		NonTerminal forStatement = addNonTerminal(NonTerminal.of("forStatement"));
		NonTerminal iterationType = addNonTerminal(NonTerminal.of("iterationType"));
		NonTerminal ifThenStatement = addNonTerminal(NonTerminal.of("ifThenStatement"));
		NonTerminal ifThenElseStatement = addNonTerminal(NonTerminal.of("ifThenElseStatement"));
		NonTerminal ifThenElseIfStatement = addNonTerminal(NonTerminal.of("ifThenElseIfStatement"));
		NonTerminal conditionsList = addNonTerminal(NonTerminal.of("conditionsList"));
		NonTerminal endAlternative = addNonTerminal(NonTerminal.of("endAlternative"));
		NonTerminal switchStatement = addNonTerminal(NonTerminal.of("switchStatement"));
		NonTerminal switchBlock = addNonTerminal(NonTerminal.of("switchBlock"));
		NonTerminal switchLabels = addNonTerminal(NonTerminal.of("switchLabels"));
		NonTerminal switchLabel = addNonTerminal(NonTerminal.of("switchLabel"));
		NonTerminal constantExpression = addNonTerminal(NonTerminal.of("constantExpression"));
		NonTerminal expression = addNonTerminal(NonTerminal.of("expression"));
		NonTerminal lambdaExpression = addNonTerminal(NonTerminal.of("lambdaExpression"));
		NonTerminal lambda = addNonTerminal(NonTerminal.of("lambda"));
		NonTerminal lambdaParameters = addNonTerminal(NonTerminal.of("lambdaParameters"));
		NonTerminal variableNamesList = addNonTerminal(NonTerminal.of("variableNamesList"));
		NonTerminal conditionalExpression = addNonTerminal(NonTerminal.of("conditionalExpression"));
		NonTerminal ternaryExpression = addNonTerminal(NonTerminal.of("ternaryExpression"));
		NonTerminal conditionalOrExpression = addNonTerminal(NonTerminal.of("conditionalOrExpression"));
		NonTerminal conditionalAndExpression = addNonTerminal(NonTerminal.of("conditionalAndExpression"));
		NonTerminal inclusiveOrExpression = addNonTerminal(NonTerminal.of("inclusiveOrExpression"));
		NonTerminal exclusiveOrExpression = addNonTerminal(NonTerminal.of("exclusiveOrExpression"));
		NonTerminal andExpression = addNonTerminal(NonTerminal.of("andExpression"));
		NonTerminal equalityExpression = addNonTerminal(NonTerminal.of("equalityExpression"));
		NonTerminal equalityOperator = addNonTerminal(NonTerminal.of("equalityOperator"));
		NonTerminal relationalExpression = addNonTerminal(NonTerminal.of("relationalExpression"));
		NonTerminal compareOperator = addNonTerminal(NonTerminal.of("compareOperator"));
		NonTerminal shiftExpression = addNonTerminal(NonTerminal.of("shiftExpression"));
		NonTerminal shiftOperator = addNonTerminal(NonTerminal.of("shiftOperator"));
		NonTerminal additiveExpression = addNonTerminal(NonTerminal.of("additiveExpression"));
		NonTerminal multiplicativeExpression = addNonTerminal(NonTerminal.of("multiplicativeExpression"));
		NonTerminal multiplicativeOperator = addNonTerminal(NonTerminal.of("multiplicativeOperator"));
		NonTerminal rangeExpression = addNonTerminal(NonTerminal.of("rangeExpression"));
		NonTerminal unaryExpression = addNonTerminal(NonTerminal.of("unaryExpression"));
		NonTerminal unaryAditiveOperator = addNonTerminal(NonTerminal.of("unaryAditiveOperator"));
		NonTerminal unaryExpressionNotPlusMinus = addNonTerminal(NonTerminal.of("unaryExpressionNotPlusMinus"));
		NonTerminal unaryMultiplicativeOperator = addNonTerminal(NonTerminal.of("unaryMultiplicativeOperator"));
		NonTerminal postfixExpression = addNonTerminal(NonTerminal.of("postfixExpression"));
		NonTerminal postincrementExpression = addNonTerminal(NonTerminal.of("postincrementExpression"));
		NonTerminal postdecrementExpression = addNonTerminal(NonTerminal.of("postdecrementExpression"));
		NonTerminal assignment = addNonTerminal(NonTerminal.of("assignment"));
		NonTerminal assignmentOperator = addNonTerminal(NonTerminal.of("assignmentOperator"));
		NonTerminal leftHandSide = addNonTerminal(NonTerminal.of("leftHandSide"));
		NonTerminal fieldAccess = addNonTerminal(NonTerminal.of("fieldAccess"));
		NonTerminal arrayAccess = addNonTerminal(NonTerminal.of("arrayAccess"));
		NonTerminal expressionName = addNonTerminal(NonTerminal.of("expressionName"));
		NonTerminal ambiguousName = addNonTerminal(NonTerminal.of("ambiguousName"));
		NonTerminal primary = addNonTerminal(NonTerminal.of("primary"));
		NonTerminal classInstanceCreationExpression = addNonTerminal(NonTerminal.of("classInstanceCreationExpression"));
		NonTerminal argumentList = addNonTerminal(NonTerminal.of("argumentList"));
		NonTerminal methodInvocation = addNonTerminal(NonTerminal.of("methodInvocation"));
		NonTerminal literal = addNonTerminal(NonTerminal.of("literal"));
		NonTerminal numberLiteral = addNonTerminal(NonTerminal.of("numberLiteral"));
		NonTerminal booleanLiteral = addNonTerminal(NonTerminal.of("booleanLiteral"));
		NonTerminal stringLiteral = addNonTerminal(NonTerminal.of("stringLiteral"));
		NonTerminal nullLiteral = addNonTerminal(NonTerminal.of("nullLiteral"));


		unit.setRule(moduleDeclaration.or(packageDeclaration.or(importDeclarations.add(typeDeclarations).or(typeDeclarations))));
		moduleDeclaration.setRule(Terminal.of("module").add(qualifiedName).add(Terminal.of("(")).add(VersionLiteral.instance()).add(Terminal.of(")")).add(moduleBody));
		moduleBody.setRule(Terminal.of("{").add(Terminal.of("}")).or(Terminal.of("{").add(moduleMemberDeclarations).add(Terminal.of("}"))));
		moduleMemberDeclarations.setRule(moduleMemberDeclaration.or(moduleMemberDeclarations.add(moduleMemberDeclaration)));
		moduleMemberDeclaration.setRule(moduleImport.or(moduleExport));
		moduleImport.setRule(Terminal.of("import").add(qualifiedName).add(versionMatchLiteral).add(Terminal.of(";")));
		versionMatchLiteral.setRule(VersionLiteral.instance().or(VersionLiteral.instance().add(Terminal.of("+"))));
		moduleExport.setRule(Terminal.of("export").add(qualifiedName).add(Terminal.of(".")).add(Terminal.of("*")).add(Terminal.of(";")).or(Terminal.of("export").add(qualifiedName).add(Terminal.of(";"))));
		packageDeclaration.setRule(Terminal.of("package").add(qualifiedName).add(Terminal.of(";")));
		qualifiedName.setRule(Identifier.instance().or(qualifiedName.add(Terminal.of(".")).add(Identifier.instance())));
		importDeclarations.setRule(importDeclaration.or(importDeclarations.add(importDeclaration)));
		importDeclaration.setRule(Terminal.of("import").add(qualifiedName).add(Terminal.of(";")).or(Terminal.of("import").add(qualifiedName).add(Terminal.of("as")).add(Identifier.instance()).add(Terminal.of(";")).or(Terminal.of("import").add(qualifiedName).add(Terminal.of("{")).add(importTypes).add(Terminal.of("}")))));
		importTypes.setRule(importName.or(importTypes.add(Terminal.of(",")).add(importName)));
		importName.setRule(Identifier.instance().or(Identifier.instance().add(Terminal.of("as")).add(Identifier.instance())));
		typeDeclarations.setRule(typeDeclaration.or(typeDeclarations.add(typeDeclaration)));
		typeDeclaration.setRule(classDeclaration.or(interfaceDeclaration));
		classDeclaration.setRule(annotations.add(Terminal.of("class")).add(qualifiedName).add(genericTypesDeclaration).add(superDeclaration).add(implementsInterfaces).add(classBody).or(annotations.add(Terminal.of("class")).add(qualifiedName).add(genericTypesDeclaration).add(superDeclaration).add(classBody)).or(Terminal.of("class").add(qualifiedName).add(genericTypesDeclaration).add(superDeclaration).add(implementsInterfaces).add(classBody)).or(Terminal.of("class").add(qualifiedName).add(genericTypesDeclaration).add(superDeclaration).add(classBody)));
		implementsInterfaces.setRule(Terminal.of("implements").add(extendsInterfaceType));
		interfaceDeclaration.setRule(annotations.add(Terminal.of("interface")).add(qualifiedName).add(genericTypesDeclaration).add(extendsInterfaces).add(interfaceBody).or(annotations.add(Terminal.of("interface")).add(qualifiedName).add(genericTypesDeclaration).add(interfaceBody)).or(Terminal.of("interface").add(qualifiedName).add(genericTypesDeclaration).add(extendsInterfaces).add(interfaceBody)).or(Terminal.of("interface").add(qualifiedName).add(genericTypesDeclaration).add(interfaceBody)));
		extendsInterfaces.setRule(Terminal.of("extends").add(extendsInterfaceType));
		extendsInterfaceType.setRule(type.or(extendsInterfaceType.add(Terminal.of(",")).add(type)));
		interfaceBody.setRule(Terminal.of("{").add(interfaceMemberDeclarations).add(Terminal.of("}")).or(Terminal.of("{").add(Terminal.of("}"))));
		interfaceMemberDeclarations.setRule(interfaceMemberDeclaration.or(interfaceMemberDeclarations.add(interfaceMemberDeclaration)));
		interfaceMemberDeclaration.setRule(constantDeclaration.or(abstractMethodDeclaration));
		constantDeclaration.setRule(annotations.add(imutabilityModifier).add(type).add(variableName).add(Terminal.of(";")).or(annotations.add(type).add(variableName).add(Terminal.of(";"))).or(imutabilityModifier.add(type).add(variableName).add(Terminal.of(";"))).or(type.add(variableName).add(Terminal.of(";"))).or(annotations.add(imutabilityModifier).add(type).add(variableName).add(Terminal.of("=")).add(expression).add(Terminal.of(";")).or(annotations.add(type).add(variableName).add(Terminal.of("=")).add(expression).add(Terminal.of(";"))).or(imutabilityModifier.add(type).add(variableName).add(Terminal.of("=")).add(expression).add(Terminal.of(";"))).or(type.add(variableName).add(Terminal.of("=")).add(expression).add(Terminal.of(";")))));
		imutabilityModifier.setRule(Terminal.of("var").or(Terminal.of("val")));
		abstractMethodDeclaration.setRule(annotations.add(type).add(Identifier.instance()).add(Terminal.of("(")).add(formalParameterList).add(Terminal.of(")")).add(Terminal.of(";")).or(type.add(Identifier.instance()).add(Terminal.of("(")).add(formalParameterList).add(Terminal.of(")")).add(Terminal.of(";"))).or(annotations.add(type).add(Identifier.instance()).add(Terminal.of("(")).add(Terminal.of(")")).add(Terminal.of(";")).or(type.add(Identifier.instance()).add(Terminal.of("(")).add(Terminal.of(")")).add(Terminal.of(";")))));
		annotations.setRule(annotation.or(annotations.add(annotation)));
		annotation.setRule(Identifier.instance());
		genericTypesDeclaration.setRule(EmptyTerminal.instance().or(Terminal.of("<").add(parametricTypes).add(Terminal.of(">"))));
		superDeclaration.setRule(EmptyTerminal.instance().or(Terminal.of("extends").add(type)));
		classBody.setRule(Terminal.of("{").add(classBodyDeclarations).add(Terminal.of("}")).or(Terminal.of("{").add(Terminal.of("}"))));
		classBodyDeclarations.setRule(classBodyDeclaration.or(classBodyDeclarations.add(classBodyDeclaration)));
		classBodyDeclaration.setRule(classMemberDeclaration);
		classMemberDeclaration.setRule(fieldDeclaration.or(methodDeclaration));
		fieldDeclaration.setRule(imutabilityModifier.add(type).add(variableName).add(Terminal.of(";")).or(type.add(variableName).add(Terminal.of(";"))).or(imutabilityModifier.add(type).add(variableName).add(Terminal.of("=")).add(expression).add(Terminal.of(";")).or(type.add(variableName).add(Terminal.of("=")).add(expression).add(Terminal.of(";")))));
		type.setRule(Identifier.instance().or(Identifier.instance().add(Terminal.of("<")).add(parametricTypes).add(Terminal.of(">")).or(Terminal.of("(").add(tupleTypes).add(Terminal.of(")")))));
		tupleTypes.setRule(type.or(tupleTypes.add(Terminal.of(",")).add(type)));
		parametricTypes.setRule(parametricType.or(parametricTypes.add(Terminal.of(",")).add(parametricType)));
		parametricType.setRule(varianceModifier.add(type));
		varianceModifier.setRule(Terminal.of("in").or(Terminal.of("out").or(Terminal.of("inv").or(EmptyTerminal.instance()))));
		variableName.setRule(Identifier.instance());
		methodDeclaration.setRule(methodHeader.add(methodBody).or(methodHeader.add(Terminal.of(";"))));
		methodHeader.setRule(annotations.add(type).add(Identifier.instance()).add(Terminal.of("(")).add(formalParameterList).add(Terminal.of(")")).or(type.add(Identifier.instance()).add(Terminal.of("(")).add(formalParameterList).add(Terminal.of(")"))).or(annotations.add(type).add(Identifier.instance()).add(Terminal.of("(")).add(Terminal.of(")")).or(type.add(Identifier.instance()).add(Terminal.of("(")).add(Terminal.of(")")))));
		methodBody.setRule(block);
		block.setRule(Terminal.of("{").add(Terminal.of("}")).or(Terminal.of("{").add(blockStatements).add(Terminal.of("}"))));
		formalParameterList.setRule(formalParameter.or(formalParameterList.add(Terminal.of(",")).add(formalParameter)));
		formalParameter.setRule(type.add(variableName));
		blockStatements.setRule(blockStatement.or(blockStatements.add(blockStatement)));
		blockStatement.setRule(localVariableDeclarationStatement.or(statement));
		statement.setRule(expressionStatement.or(whileStatement.or(forStatement.or(ifThenStatement.or(ifThenElseStatement.or(ifThenElseIfStatement.or(switchStatement.or(returnStatement.or(breakStatement.or(continueStatement.or(tryStatement)))))))))));
		returnStatement.setRule(Terminal.of("return").add(expression).add(Terminal.of(";")).or(Terminal.of("return").add(Terminal.of(";"))));
		breakStatement.setRule(Terminal.of("break").add(Identifier.instance()).add(Terminal.of(";")).or(Terminal.of("break").add(Terminal.of(";"))));
		continueStatement.setRule(Terminal.of("continue").add(Identifier.instance()).add(Terminal.of(";")).or(Terminal.of("continue").add(Terminal.of(";"))));
		tryStatement.setRule(Terminal.of("try").add(resource).add(block).add(catches).add(ntfinally).or(Terminal.of("try").add(resource).add(block).add(catches)).or(Terminal.of("try").add(resource).add(block).add(ntfinally)).or(Terminal.of("try").add(resource).add(block)).or(Terminal.of("try").add(block).add(catches).add(ntfinally)).or(Terminal.of("try").add(block).add(catches)).or(Terminal.of("try").add(block).add(ntfinally)).or(Terminal.of("try").add(block)));
		resource.setRule(Terminal.of("(").add(assignment).add(Terminal.of(")")));
		catches.setRule(catchClause.or(catches.add(catchClause)));
		catchClause.setRule(Terminal.of("catch").add(Terminal.of("(")).add(formalParameter).add(Terminal.of(")")).add(block));
		ntfinally.setRule(Terminal.of("finally").add(block));
		expressionStatement.setRule(statementExpression.add(Terminal.of(";")));
		statementExpression.setRule(assignment.or(postincrementExpression.or(postdecrementExpression.or(methodInvocation.or(classInstanceCreationExpression)))));
		localVariableDeclarationStatement.setRule(imutabilityModifier.add(type).add(variableName).add(Terminal.of(";")).or(type.add(variableName).add(Terminal.of(";"))).or(imutabilityModifier.add(type).add(variableName).add(Terminal.of("=")).add(expression).add(Terminal.of(";")).or(type.add(variableName).add(Terminal.of("=")).add(expression).add(Terminal.of(";"))).or(imutabilityModifier.add(type).add(variableName).add(Terminal.of("=")).add(initializer).add(Terminal.of(";")).or(type.add(variableName).add(Terminal.of("=")).add(initializer).add(Terminal.of(";"))))));
		initializer.setRule(arrayInitializer.or(tupleInitializer.or(mapInitializer)));
		arrayInitializer.setRule(Terminal.of("[").add(arrayInitializerVariables).add(Terminal.of("]")));
		tupleInitializer.setRule(Terminal.of("(").add(tupleInitializerVariables).add(Terminal.of(")")).or(Terminal.of("(").add(Terminal.of(")"))));
		arrayInitializerVariables.setRule(initializerVariable.or(arrayInitializerVariables.add(Terminal.of(",")).add(initializerVariable)));
		initializerVariable.setRule(initializer.or(expression));
		tupleInitializerVariables.setRule(initializerVariable.or(tupleInitializerVariables.add(Terminal.of(",")).add(initializerVariable)));
		mapInitializer.setRule(Terminal.of("{").add(mapInitializerVariables).add(Terminal.of("}")));
		mapInitializerVariables.setRule(mapInitializerPair.or(mapInitializerVariables.add(Terminal.of(",")).add(mapInitializerPair)));
		mapInitializerPair.setRule(mapInitializerVariable.add(Terminal.of(":")).add(mapInitializerVariable));
		mapInitializerVariable.setRule(initializer.or(expression));
		whileStatement.setRule(Terminal.of("while").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(block).or(Terminal.of("while").add(Terminal.of("(")).add(expression).add(Terminal.of(")"))));
		forStatement.setRule(Terminal.of("for").add(Terminal.of("(")).add(iterationType).add(Terminal.of("in")).add(expression).add(Terminal.of(")")).add(block));
		iterationType.setRule(type.add(variableName).or(Terminal.of("val").add(type).add(variableName).or(Terminal.of("val").add(variableName))));
		ifThenStatement.setRule(Terminal.of("if").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(block));
		ifThenElseStatement.setRule(Terminal.of("if").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(block).add(Terminal.of("else")).add(block));
		ifThenElseIfStatement.setRule(conditionsList.or(conditionsList.add(endAlternative)));
		conditionsList.setRule(Terminal.of("if").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(block).add(Terminal.of("else")).add(Terminal.of("if")).add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(block));
		endAlternative.setRule(Terminal.of("else").add(block).or(Terminal.of("else").add(Terminal.of("if")).add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(block).add(endAlternative)));
		switchStatement.setRule(Terminal.of("switch").add(Terminal.of("(")).add(constantExpression).add(Terminal.of(")")).add(switchBlock));
		switchBlock.setRule(Terminal.of("{").add(switchLabels).add(Terminal.of("}")));
		switchLabels.setRule(switchLabel.or(switchLabels.add(switchLabel)));
		switchLabel.setRule(Terminal.of("case").add(Terminal.of("(")).add(expression).add(Terminal.of(")")).add(block).or(Terminal.of("default").add(block)));
		constantExpression.setRule(leftHandSide);
		expression.setRule(variableName.or(lambdaExpression.or(assignment)));
		lambdaExpression.setRule(lambda.or(conditionalExpression));
		lambda.setRule(Terminal.of("(").add(lambdaParameters).add(Terminal.of(")")).add(Terminal.of("->")).add(expression).or(variableName.add(Terminal.of("->")).add(expression).or(Terminal.of("(").add(Terminal.of(")")).add(Terminal.of("->")).add(expression))));
		lambdaParameters.setRule(formalParameterList.or(variableNamesList));
		variableNamesList.setRule(variableName.or(variableNamesList.add(Terminal.of(",")).add(variableName)));
		conditionalExpression.setRule(conditionalOrExpression.or(ternaryExpression));
		ternaryExpression.setRule(conditionalOrExpression.add(Terminal.of("?")).add(expression).add(Terminal.of(":")).add(expression));
		conditionalOrExpression.setRule(conditionalAndExpression.or(conditionalOrExpression.add(Terminal.of("||")).add(conditionalAndExpression)));
		conditionalAndExpression.setRule(inclusiveOrExpression.or(conditionalAndExpression.add(Terminal.of("&&")).add(inclusiveOrExpression)));
		inclusiveOrExpression.setRule(exclusiveOrExpression.or(inclusiveOrExpression.or(exclusiveOrExpression)));
		exclusiveOrExpression.setRule(andExpression.or(exclusiveOrExpression.add(Terminal.of("^")).add(andExpression)));
		andExpression.setRule(equalityExpression.or(andExpression.add(Terminal.of("&")).add(equalityExpression)));
		equalityExpression.setRule(relationalExpression.or(equalityExpression.add(equalityOperator).add(relationalExpression)));
		equalityOperator.setRule(Terminal.of("==").or(Terminal.of("!=").or(Terminal.of("===").or(Terminal.of("!==")))));
		relationalExpression.setRule(shiftExpression.or(relationalExpression.add(compareOperator).add(shiftExpression).or(relationalExpression.add(Terminal.of("instanceof")).add(shiftExpression))));
		compareOperator.setRule(Terminal.of("<").or(Terminal.of(">").or(Terminal.of("<=").or(Terminal.of(">=")))));
		shiftExpression.setRule(additiveExpression.or(shiftExpression.add(shiftOperator).add(additiveExpression)));
		shiftOperator.setRule(Terminal.of("<<").or(Terminal.of(">>").or(Terminal.of(">>>"))));
		additiveExpression.setRule(multiplicativeExpression.or(additiveExpression.add(Terminal.of("+")).add(multiplicativeExpression).or(additiveExpression.add(Terminal.of("-")).add(multiplicativeExpression))));
		multiplicativeExpression.setRule(rangeExpression.or(multiplicativeExpression.add(multiplicativeOperator).add(rangeExpression)));
		multiplicativeOperator.setRule(Terminal.of("*").or(Terminal.of("/").or(Terminal.of("%"))));
		rangeExpression.setRule(unaryExpression.or(unaryExpression.add(Terminal.of("..")).add(unaryExpression)));
		unaryExpression.setRule(unaryExpressionNotPlusMinus.or(unaryAditiveOperator.add(unaryExpression)));
		unaryAditiveOperator.setRule(Terminal.of("+").or(Terminal.of("-").or(Terminal.of("++").or(Terminal.of("--")))));
		unaryExpressionNotPlusMinus.setRule(postfixExpression.or(unaryMultiplicativeOperator.add(unaryExpression)));
		unaryMultiplicativeOperator.setRule(Terminal.of("~").or(Terminal.of("!")));
		postfixExpression.setRule(primary.or(expressionName.or(postincrementExpression.or(postdecrementExpression))));
		postincrementExpression.setRule(postfixExpression.add(Terminal.of("++")));
		postdecrementExpression.setRule(postfixExpression.add(Terminal.of("--")));
		assignment.setRule(leftHandSide.add(assignmentOperator).add(expression));
		assignmentOperator.setRule(Terminal.of("=").or(Terminal.of("*=").or(Terminal.of("/=").or(Terminal.of("%=").or(Terminal.of("+=").or(Terminal.of("<<=").or(Terminal.of(">>=").or(Terminal.of(">>>=").or(Terminal.of("&=").or(Terminal.of("^=").or(Terminal.of("|="))))))))))));
		leftHandSide.setRule(expressionName.or(fieldAccess.or(arrayAccess)));
		fieldAccess.setRule(primary.add(Terminal.of(".")).add(Identifier.instance()).or(Terminal.of("super").add(Terminal.of(".")).add(Identifier.instance())));
		arrayAccess.setRule(expressionName.add(Terminal.of("[")).add(expression).add(Terminal.of("]")).or(primary.add(Terminal.of("[")).add(expression).add(Terminal.of("]"))));
		expressionName.setRule(Identifier.instance().or(ambiguousName.add(Terminal.of(".")).add(Identifier.instance())));
		ambiguousName.setRule(Identifier.instance().or(ambiguousName.add(Terminal.of(".")).add(Identifier.instance())));
		primary.setRule(literal.or(Terminal.of("this").or(Terminal.of("(").add(expression).add(Terminal.of(")")).or(fieldAccess.or(arrayAccess.or(classInstanceCreationExpression.or(methodInvocation)))))));
		classInstanceCreationExpression.setRule(Terminal.of("new").add(type).add(Terminal.of("(")).add(argumentList).add(Terminal.of(")")).or(Terminal.of("new").add(type).add(Terminal.of("(")).add(Terminal.of(")"))));
		argumentList.setRule(expression.or(argumentList.add(Terminal.of(",")).add(expression)));
		methodInvocation.setRule(qualifiedName.add(Terminal.of("(")).add(argumentList).add(Terminal.of(")")).or(qualifiedName.add(Terminal.of("(")).add(Terminal.of(")"))).or(primary.add(Terminal.of(".")).add(Identifier.instance()).add(Terminal.of("(")).add(argumentList).add(Terminal.of(")")).or(primary.add(Terminal.of(".")).add(Identifier.instance()).add(Terminal.of("(")).add(Terminal.of(")"))).or(Terminal.of("super").add(Terminal.of(".")).add(Identifier.instance()).add(Terminal.of("(")).add(argumentList).add(Terminal.of(")")).or(Terminal.of("super").add(Terminal.of(".")).add(Identifier.instance()).add(Terminal.of("(")).add(Terminal.of(")"))))));
		literal.setRule(numberLiteral.or(booleanLiteral.or(stringLiteral.or(nullLiteral))));
		numberLiteral.setRule(Numeric.instance());
		booleanLiteral.setRule(Terminal.of("true").or(Terminal.of("false")));
		stringLiteral.setRule(Text.instance());
		nullLiteral.setRule(Terminal.of("null"));

		return unit;
	}

}
