
public interface Comparable<in T> {

	// constants that make part of the contract
	 public val Int GreaterThan = 1;
	 public val Int EqualTo = 0;
	 public val Int LessThan = -1;
	 
	 /** abstract method **/
	 public Int compare (T a, T b) ;

}
/*
public class TestIt<in T> implements Comparable<T> {

	 /** concrete implementation method **/
	 (T a , T b) -> 2;
	  public val compare : Int = (T a, T b) {
	 
	 public val compare = function (T a, T b) {
	 
	 	if (a > b){
	 		return GreaterThan;
	 	} else if (a < b){
	 		return LessThan;
	 	} else {
	 		return EqualTo;
	 	}
	 }
	 
	  public val compare = function (T a, T b)  ->  (a > b) ? GreaterThan : ((a < b) ? LessThan : EqualTo);

}
*/