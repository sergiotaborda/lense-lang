
import lense.core.lang.Binary;
import lense.core.lang.Boolean;
import lense.core.collections.Array;
import lense.core.math.Natural;
import lense.core.lang.Void;

public class BitArray implements Binary {

	private val Array<Boolean> bits;

	public constructor (Natural bitCount){
		return new BitArray(new Array<Boolean>(bitCount, false));
	}
	
	public constructor (Natural bitCount, Boolean seed){
		return new BitArray(new Array<Boolean>(bitCount, seed));
	}
	
	private constructor (Array<Boolean> bits);
	
	public Natural size {
		get{
			return bits.size;
		}
	}
	
	public Binary flipAll() {
		val Array<Boolean> negated = new Array<Boolean>(bits);

		for (Natural n in negated.indexes){
			negated[n] = !negated[n];
		}
		
		return new BitArray(negated);
	}	
	
	public Void flip(Natural index){
		this.bits[index] = !this.bits[index];
	}
	
	public Boolean [Natural index] {
		get {
			return bits[index];
		}
		set(value) {
			bits[index] = value;
		}
	}
	
	public BitArray rightShiftBy(Natural n){
		var Array<Boolean> newArray = new Array<Boolean>(n, false);

		return new BitArray(newArray);
	}
		
		
	public BitArray leftShiftBy(Natural n){
		var Array<Boolean> newArray = new Array<Boolean>(n, false);

		return new BitArray(newArray);
	}

}