unit = packageDeclaration ,  importDeclarations?, typeDeclarations;
packageDeclaration  = 'package' , qualifiedName , ';' ;
qualifiedName = identifier | qualifiedName , '.' , identifier; 
importDeclarations = importDeclaration | importDeclarations , importDeclaration;
importDeclaration = 'import' , qualifiedName , ';' ;
typeDeclarations = typeDeclaration | typeDeclarations ,  typeDeclaration;
typeDeclaration = classDeclaration | interfaceDeclaration;
classDeclaration = annotations?, 'class', qualifiedName, genericTypesDeclaration, superDeclaration, implementsInterfaces?,  classBody;
implementsInterfaces = 'implements', type | implementsInterfaces, ',', type;
interfaceDeclaration = annotations?, 'interface', qualifiedName, genericTypesDeclaration, extendsInterfaces? , interfaceBody;
extendsInterfaces = 'extends', type | extendsInterfaces, ',', type;
interfaceBody= '{', interfaceMemberDeclarations ,'}' | '{' , '}';
interfaceMemberDeclarations= interfaceMemberDeclaration | interfaceMemberDeclarations , interfaceMemberDeclaration;
interfaceMemberDeclaration= constantDeclaration | abstractMethodDeclaration;
constantDeclaration =  annotations?, imutabilityModifier?, type , variableName, ';' | annotations?, imutabilityModifier?, type , variableName, '=' , expression , ';';
imutabilityModifier = 'var' | 'val';
abstractMethodDeclaration = annotations?, type, identifier ,'(', formalParameterList , ')'  , ';' | annotations?, type, identifier ,'(', ')' , ';' ;
annotations = annotation | annotations , annotation;
annotation = 'public' | 'private' | 'abstract' | 'final';
genericTypesDeclaration = empty | '<' , parametricTypes , '>';
superDeclaration = empty | 'extends' , type;
classBody = '{',classBodyDeclarations ,'}' | '{' ,'}';
classBodyDeclarations = classBodyDeclaration | classBodyDeclarations, classBodyDeclaration;
classBodyDeclaration = classMemberDeclaration;
classMemberDeclaration = fieldDeclaration | methodDeclaration;
fieldDeclaration =  imutabilityModifier?, type , variableName, ';' | imutabilityModifier?, type , variableName, '=' , expression , ';';
type = qualifiedName |  qualifiedName , '<' , parametricTypes , '>';
parametricTypes = parametricType | parametricTypes , ',', parametricType;
parametricType = varianceModifier , type;
varianceModifier = 'in' | 'out' | 'inv' | empty;
variableName = identifier;
methodDeclaration= methodHeader , methodBody;
methodHeader = annotations?, type, identifier ,'(', formalParameterList , ')' | annotations?, type, identifier ,'(', ')'; 
methodBody = block ;
block =  '{' , '}' | '{' , blockStatements , '}';
formalParameterList = formalParameter | formalParameterList, ',', formalParameter;
formalParameter =  type, variableName;
blockStatements = blockStatement | blockStatements, blockStatement;
blockStatement = localVariableDeclarationStatement | statement;
statement= expressionStatement | whileStatement | forStatement | ifThenStatement | ifThenElseStatement | ifThenElseIfStatement | switchStatement | returnStatement | breakStatement | continueStatement | tryStatement;
returnStatement=  'return', expression, ';' |  'return', ';';
breakStatement = 'break', identifier, ';' | 'break', ';' ;
continueStatement= 'continue', identifier, ';' | 'continue', ';';
tryStatement= 'try', resource?, block, catches?, finally?;
resource = '(' , assignment, ')';
catches = catchClause | catches , catchClause;
catchClause= 'catch', '(', formalParameter ,')', block;
finally = 'finally', block;
expressionStatement= statementExpression , ';';
statementExpression= assignment | postincrementExpression  | postdecrementExpression | methodInvocation | classInstanceCreationExpression;
localVariableDeclarationStatement= imutabilityModifier?, type, variableName , ';' | imutabilityModifier?, type, variableName , '=' , expression, ';';
whileStatement= 'while', '(', expression, ')',  block | 'while', '(', expression, ')';
forStatement= 'for',  '(', iterationType , 'in', expression ,')', block;
iterationType = type , variableName  | 'val' , type, variableName | 'val' , variableName;
ifThenStatement = 'if', '(', expression ,')', block;
ifThenElseStatement = 'if', '(', expression ,')', block , 'else', block;
ifThenElseIfStatement =  conditionsList | conditionsList , endAlternative;
conditionsList = 'if', '(', expression ,')', block , 'else', 'if', '(', expression ,')', block;
endAlternative = 'else', block | 'else' , 'if', '(', expression ,')', block , endAlternative;
switchStatement = 'switch', '(', constantExpression, ')', switchBlock;
switchBlock = '{', switchLabels, '}';
switchLabels= switchLabel | switchLabels, switchLabel;
switchLabel = 'case', '(',  expression , ')' , block | 'default' , block;
constantExpression= leftHandSide;
expression = variableName | lambdaExpression | assignment;
lambdaExpression = lambda | conditionalExpression;
lambda = '(' , lambdaParameters , ')' , '->', expression |  variableName , '->', expression |  '(' , ')' , '->', expression;
lambdaParameters = formalParameterList | variableNamesList;
variableNamesList = variableName | variableNamesList, ',', variableName;
conditionalExpression= conditionalOrExpression | ternaryExpression;
ternaryExpression = conditionalOrExpression, '?', expression, ':', expression;
conditionalOrExpression = conditionalAndExpression | conditionalOrExpression ,'||', conditionalAndExpression;
conditionalAndExpression = inclusiveOrExpression | conditionalAndExpression, '&&', inclusiveOrExpression;
inclusiveOrExpression= exclusiveOrExpression | inclusiveOrExpression '|' exclusiveOrExpression;
exclusiveOrExpression = andExpression | exclusiveOrExpression, '^', andExpression;
andExpression = equalityExpression | andExpression, '&', equalityExpression;
equalityExpression = relationalExpression | equalityExpression, equalityOperator, relationalExpression;
equalityOperator = '==' | '!=' | '===' | '!==';
relationalExpression = shiftExpression | relationalExpression, compareOperator, shiftExpression | relationalExpression, 'instanceof', shiftExpression;
compareOperator = '<' | '>' | '<=' | '>=';
shiftExpression = additiveExpression | shiftExpression, shiftOperator, additiveExpression;
shiftOperator = '<<' | '>>' | '>>>';
additiveExpression = multiplicativeExpression | additiveExpression, '+', multiplicativeExpression | additiveExpression, '-', multiplicativeExpression;
multiplicativeExpression = rangeExpression |  multiplicativeExpression ,multiplicativeOperator, rangeExpression;
multiplicativeOperator = '*' | '/' | '%';
rangeExpression = unaryExpression | unaryExpression , '..', unaryExpression;
unaryExpression = unaryExpressionNotPlusMinus | unaryAditiveOperator, unaryExpression;
unaryAditiveOperator = '+' | '-'| '++' |'--';
unaryExpressionNotPlusMinus = postfixExpression | unaryMultiplicativeOperator, unaryExpression;
unaryMultiplicativeOperator = '~' | '!' ;
postfixExpression = primary | expressionName | postincrementExpression  | postdecrementExpression;
postincrementExpression = postfixExpression, '++';
postdecrementExpression = postfixExpression, '--';
assignment = leftHandSide, assignmentOperator, expression; 
assignmentOperator = '=' |'*=' | '/=' |'%=' |'+=' | '<<=' |'>>=' | '>>>=' | '&=' | '^=' | '|=';
leftHandSide = expressionName | fieldAccess | arrayAccess;
fieldAccess= primary ,'.', identifier | 'super', '.', identifier;
arrayAccess = expressionName ,'[', expression, ']' | primary, '[', expression, ']';
expressionName= identifier | ambiguousName, '.', identifier;
ambiguousName= identifier | ambiguousName, '.', identifier;
primary = literal | 'this' | '(', expression ,')' | fieldAccess | arrayAccess | classInstanceCreationExpression | methodInvocation;
classInstanceCreationExpression = 'new' ,type, '(', argumentList, ')' | 'new' ,type, '(', ')';
argumentList = expression | argumentList, ',', expression;
methodInvocation= qualifiedName, '(', argumentList?, ')' | primary ,'.', identifier , '(', argumentList? ,')' | 'super', '.', identifier, '(', argumentList?, ')';
literal= numberLiteral | booleanLiteral | stringLiteral | nullLiteral;
numberLiteral = number;
booleanLiteral= 'true' | 'false';
stringLiteral = text;
nullLiteral = 'null';